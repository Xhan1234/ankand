import paypalrestsdk
from django.conf import settings
from django.shortcuts import render, redirect
from django.urls import reverse
from paypalrestsdk import Sale, Payout, ResourceNotFound

paypalrestsdk.configure({
    "mode": "sandbox",  # Change to "live" for production
    "client_id": settings.PAYPAL_CLIENT_ID,
    "client_secret": settings.PAYPAL_SECRET,
})

def make_payout(recipient_email, amount, currency='USD'):
    payout_item = {
        "recipient_type": "EMAIL",
        "amount": {
            "value": amount,
            "currency": currency
        },
        "receiver": recipient_email,
        "note": "Payment from your website"
    }

    payout = Payout({
        "sender_batch_header": {
            "sender_batch_id": "batch_" + str(uuid.uuid4())[:8],
            "email_subject": "You have a payout!"
        },
        "items": [payout_item]
    })

    try:
        payout_created = payout.create()
        return payout_created
    except ResourceNotFound as error:
        print(error)
        return None

def make_payout_admin(recipient_email, amount, currency='USD'):
    payout_item = {
        "recipient_type": "EMAIL",
        "amount": {
            "value": amount,
            "currency": currency
        },
        "receiver": recipient_email,
        "note": "Payment from your website"
    }

    payout = Payout({
        "sender_batch_header": {
            "sender_batch_id": "batch_" + str(uuid.uuid4())[:8],
            "email_subject": "You have a payout!"
        },
        "items": [payout_item]
    })

    try:
        payout_created = payout.create()
        return payout_created
    except ResourceNotFound as error:
        print(error)
        return None

def create_payment(request):
    paid_amount = request.POST.get('paid_amount')
    percentage_price = request.POST.get('percentage_price')
    direct_buy = request.POST.get('direct_buy')
    paymentMethod = request.POST.get('paymentMethod')
    product_slug = request.POST.get('product_slug')
    billing_profile = request.POST.get('billing_profile')
    user = request.user

    product = get_object_or_404(Auction, slug=product_slug)
    userdetails = UserProfile.objects.get(username=user)
    same = Order.objects.filter(user=userdetails, auction=product)

    recipient_email = "sb-bcw9t30423330@business.example.com"
    payout_amount = direct_buy
    
    # if same:
    #     messages.error(request, "You already ordered this product!")
    #     return HttpResponseRedirect(request.META.get('HTTP_REFERER'))

    payment = paypalrestsdk.Payment({
        "intent": "sale",
        "payer": {
            "payment_method": "paypal",
        },
        "redirect_urls": {
            "return_url": request.build_absolute_uri(reverse('execute_payment')),
            "cancel_url": request.build_absolute_uri(reverse('payment_failed')),
        },
        "transactions": [
            {
                "amount": {
                    "total": paid_amount,  # Total amount in USD
                    "currency": "USD",
                },
                "description": product.type,
            }
        ],
    })

    if payment:
        make_payout_admin
        make_payout(recipient_email, payout_amount)
        # confirm_order_after_payments(user, product_slug, paid_amount, paymentMethod, billing_profile)
        return redirect(payment.links[1].href)  # Redirect to PayPal for payment
    else:
        return render(request, 'payments/payment_failed.html')
    


def confirm_order_after_payments(user, product_slug, paid_amount, paymentMethod, billing_profile):
    product = get_object_or_404(Auction, slug=product_slug)
    userdetails = UserProfile.objects.get(username=user)
    billing = get_object_or_404(BillingAddress, pk=billing_profile)

    with transaction.atomic():
        order = Order.objects.create(
            auction=product,
            product_type='direct_buy', 
            user=userdetails, 
            billing=billing, 
            payment_method=paymentMethod, 
            quantity=1, 
            paid_amount=paid_amount,
            balance_type='debit',
            )
        Invoice.objects.create(user=userdetails, order=order)
        bid = Bidder(auction=product, user=userdetails, bid_amount=paid_amount, type='buy-it-now')
        bid.save()

        product.quantity = product.quantity - 1
        product.winnerBid = bid
        product.closed = True
        product.status = False
        product.save()

        if paymentMethod == "credit_card":
            order.paid = True
            order.save()
        elif paymentMethod == "paypal":
            order.paid = True
            order.save()
        else:
            order.paid = False
            order.save()



def execute_payment(request):
    payment_id = request.GET.get('paymentId')
    payer_id = request.GET.get('PayerID')

    payment = paypalrestsdk.Payment.find(payment_id)

    if payment.execute({"payer_id": payer_id}):
        return render(request, 'payments/payment_success.html')
    else:
        return render(request, 'payments/payment_failed.html')



def payment_checkout(request):
    return render(request, 'checkout.html')


def payment_failed(request):
    return render(request, 'payments/payment_failed.html')





https://connect.stripe.com/oauth/authorize?redirect_uri=https://connect.stripe.com/hosted/oauth&client_id=ca_PzKfHRJOEBU1w2imtjgJBmr2Wxf0kyYT&state=onbrd_PzLXMAc07kGPPmQegD8AOPYsQw&response_type=code&scope=read_write&stripe_user[country]=US